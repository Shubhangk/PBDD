import islpy as isl
import V2.Quast as Q
from V2.timer import Timer

def quast_function(a, b):
    print("Intersecting Quasts")
    c = a.intersect(b)
    print("Done!")
    return c

def islpy_function(A, B):
    print("Intersecting islpy.Sets")
    C = A.intersect(B)
    print("Done!")
    return C

if __name__ == "__main__":
    print("Entering main()")

    print("Constructing set_1234")
    set_1234 = isl.Set("[p_0, p_1, p_2, p_3, p_4, p_5, p_6, p_7] -> { [i0] : (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) }")
    print("Done!")

    print("Constructing set set_1233")
    set_1233 = isl.Set("[p_0, p_1, p_2, p_3, p_4, p_5, p_6, p_7] -> { [i0] : (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) }")
    print("Done!")
    print("Constructing Quast for set_1234")
    quast_1234 = Q.Quast(set_1234)
    print("Done!")
    print("Constructing Quast for set_1233")
    quast_1233 = Q.Quast(set_1233)
    print("Done!")

    t = Timer()
    print("------------")
    t.start()
    c = quast_function(quast_1234, quast_1234)
    t.stop()
    print("------------")
    t.start()
    C = islpy_function(set_1234, set_1233)
    t.stop()
    print("------------")
    # c.visualize_tree()
    # print(C == c.reconstruct_set())
    print("Exiting main")