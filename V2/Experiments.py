import V2.timing
import islpy as isl
import V2.Quast as Q

def quast_function(A, B):
    print("Beginning Quast function")
    a = Q.Quast(A)
    b = Q.Quast(B)
    print("Quasts constructed")
    c = a.intersect(b)
    print("Quast Done!")

def islpy_function(A, B):
    print("beginning islpy function")
    C = A.intersect(B)
    print("islpy Done!")

if __name__ == "__main__":
    print("Starting experiment")
    A = isl.Set("[p_0, p_1, p_2, p_3, p_4, p_5, p_6, p_7] -> { [i0] : (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_3 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_2 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_3 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_1 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_3 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_2 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_3 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_4 and p_7 > p_5 and p_7 > p_6 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_4 and p_7 > p_5 and p_7 < p_6 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_4 and p_7 > p_6 and p_7 < p_5 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_4 and p_7 < p_6 and p_7 < p_5 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_5 and p_7 > p_6 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_5 and p_7 < p_6 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 > p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) or (i0 = p_7 and p_0 > 0 and p_7 < p_6 and p_7 < p_5 and p_7 < p_4 and p_7 < p_3 and p_7 < p_2 and p_7 < p_1) }")
    print("A constructed")
    B = isl.Set("[p_0, p_1, p_2, p_3, p_4, p_5, p_6, p_7] -> { [i0] : (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_3 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_2 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_3 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_1 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_3 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_2 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_3 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_4 and i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_4 and i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_4 and i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_4 and i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_5 and i0 > p_6 and i0 >= 0 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_5 and i0 >= 0 and i0 < p_6 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 > p_6 and i0 >= 0 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) or (i0 >= 0 and i0 < p_6 and i0 < p_5 and i0 < p_4 and i0 < p_3 and i0 < p_2 and i0 < p_1 and i0 < p_0) }")
    print("B constructed")
    A.dump()
    print(A)
    quast_function(A, B)
    islpy_function(A, B)
    print("Main Done")